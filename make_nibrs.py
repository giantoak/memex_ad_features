import numpy as np
import pandas as pd
locations = (
    (0,  2),
    (2, 4),
    (4, 13),
    (13, 25),
    (25, 33),
    (33, 36),
    (36, 39),
    (39, 42),
    (42, 45),
    (45, 48),
    (48, 51),
    (51, 54),
    (54, 57),
    (57, 60),
    (60, 68),
    (68, 76),
    (76, 106),
    (106, 108),
    (108, 110),
    (110, 112),
    (112, 114),
    (114, 116),
    (116, 118),
    (118, 127),
    (127, 131),
    (131, 135),
    (135, 137),
    (137, 145),
    (145, 154),
    (154, 157),
    (157, 160),
    (160, 169),
    (169, 178),
    (178, 181),
    (181, 184),
    (184, 193),
    (193, 202),
    (202, 205),
    (205, 208),
    (208, 217),
    (217, 226),
    (226, 229),
    (229, 232),
    (232, 241),
    (241, 250),
    (250, 253),
    (253, 256),
    (256, 265),
    (265, 267),
    (267, 269),
    (269, 273),
    (273, 276),
    (276, 279),
    (279, 282),
    (282, 285),
    (285, 288),
    (288, 291),
    (291, 294),
    (294, 297),
    (297, 300),
    (300, 303),
    (303, 306),
    (306, 309),
    (309, 312),
    (312, 315),
    (315, 318),
    (318, 321),
    (321, 324),
    (324, 326),
    (326, 328),
    (328, 330),
    (330, 333),
    (333, 335),
    (335, 337),
    (337, 341),
    (341, 343),
    (343, 351),
    (351, 353),
    (353, 356),
    (356, 359),
    (359, 362),
    (362, 364),
    (364, 366),
    (366, 368),
    (368, 370),
    (370, 372),
    (372, 374),
    (374, 376),
    (376, 378),
    (378, 380),
    (380, 382),
    (382, 384),
    (384, 386),
    (386, 388),
    (388, 390),
    (390, 392),
    (392, 394),
    (394, 396),
    (396, 398),
    (398, 400),
    (400, 402),
    (402, 404),
    (404, 406),
    (406, 408),
    (408, 410),
    (410, 412),
    (412, 414),
    (414, 416),
    (416, 418),
    (418, 420),
    (420, 422),
    (422, 425),
    (425, 428),
    (428, 431),
    (431, 434),
    (434, 437),
    (437, 440),
    (440, 443),
    (443, 446),
    (446, 449),
    (449, 451),
    (451, 453),
    (453, 455),
    (455, 457),
    (457, 459),
    (459, 461),
    (461, 463),
    (463, 465),
    (465, 467),
    (467, 476),
    (476, 485),
    (485, 494),
    (494, 502),
    (502, 510),
    (510, 518),
    (518, 520),
    (520, 522),
    (522, 524),
    (524, 526),
    (526, 528),
    (528, 530),
    (530, 532),
    (532, 534),
    (534, 536),
    (536, 545),
    (545, 554),
    (554, 563),
    (563, 566),
    (566, 569),
    (569, 572),
    (572, 574),
    (574, 576),
    (576, 578),
    (578, 580),
    (580, 582),
    (582, 584),
    (584, 593),
    (593, 602),
    (602, 611),
    (611, 614),
    (614, 617),
    (617, 620),
    (620, 622),
    (622, 624),
    (624, 626),
    (626, 628),
    (628, 630),
    (630, 632),
    (632, 641),
    (641, 650),
    (650, 659),
    (659, 662),
    (662, 665),
    (665, 668),
    (668, 670),
    (670, 672),
    (672, 674),
    (674, 677),
    (677, 680),
    (680, 683),
    (683, 686),
    (686, 689),
    (689, 692),
    (692, 695),
    (695, 698),
    (698, 701),
    (701, 704),
    (704, 707),
    (707, 710),
    (710, 713),
    (713, 716),
    (716, 719),
    (719, 722),
    (722, 725),
    (725, 728),
    (728, 731),
    (731, 734),
    (734, 737),
    (737, 740),
    (740, 743),
    (743, 746),
    (746, 749),
    (749, 752),
    (752, 755),
    (755, 758),
    (758, 761),
    (761, 764),
    (764, 767),
    (767, 770),
    (770, 773),
    (773, 775),
    (775, 777),
    (777, 779),
    (779, 781),
    (781, 783),
    (783, 785),
    (785, 787),
    (787, 789),
    (789, 791),
    (791, 800),
    (800, 809),
    (809, 818),
    (818, 822),
    (822, 826),
    (826, 830),
    (830, 832),
    (832, 834),
    (834, 836),
    (836, 838),
    (838, 840),
    (840, 842),
    (842, 844),
    (844, 846),
    (846, 848),
    (848, 850),
    (850, 852),
    (852, 854),
    (854, 856),
    (856, 858),
    (858, 860),
    (860, 862),
    (862, 864),
    (864, 866),
    (866, 868),
    (868, 870),
    (870, 872),
    (872, 874),
    (874, 876),
    (876, 878),
    (878, 880),
    (880, 882),
    (882, 884),
    (884, 886),
    (886, 888),
    (888, 890),
    (890, 892),
    (892, 894),
    (894, 896),
    (896, 898),
    (898, 900),
    (900, 902),
    (902, 904),
    (904, 906),
    (906, 908),
    (908, 910),
    (910, 912),
    (912, 914),
    (914, 916),
    (916, 918),
    (918, 920),
    (920, 922),
    (922, 924),
    (924, 926),
    (926, 928),
    (928, 930),
    (930, 932),
    (932, 934),
    (934, 936),
    (936, 938),
    (938, 940),
    (940, 942),
    (942, 944),
    (944, 946),
    (946, 948),
    (948, 950),
    (950, 952),
    (952, 954),
    (954, 956),
    (956, 958),
    (958, 960),
    (960, 962),
    (962, 964),
    (964, 966),
    (966, 968),
    (968, 970),
    (970, 972),
    (972, 974),
    (974, 976),
    (976, 978),
    (978, 980),
    (980, 982),
    (982, 984),
    (984, 986),
    (986, 988),
    (988, 990),
    (990, 992),
    (992, 994),
    (994, 996),
    (996, 998),
    (998, 1000),
    (1000, 1002),
    (1002, 1004),
    (1004, 1006),
    (1006, 1008),
    (1008, 1010),
    (1010, 1012),
    (1012, 1014),
    (1014, 1016),
    (1016, 1018),
    (1018, 1020),
    (1020, 1022),
    (1022, 1024),
    (1024, 1026),
    (1026, 1028),
    (1028, 1030),
    (1030, 1032),
    (1032, 1034),
    (1034, 1036),
    (1036, 1038),
    (1038, 1040),
    (1040, 1042),
    (1042, 1044),
    (1044, 1046),
    (1046, 1048),
    (1048, 1050),
    (1050, 1052),
    (1052, 1064),
    (1064, 1076),
    (1076, 1088),
    (1088, 1096),
    (1096, 1104),
    (1104, 1112),
    (1112, 1114),
    (1114, 1116),
    (1116, 1118),
    (1118, 1120),
    (1120, 1122),
    (1122, 1124),
    (1124, 1127),
    (1127, 1130),
    (1130, 1133),
    (1133, 1136),
    (1136, 1139),
    (1139, 1142),
    (1142, 1145),
    (1145, 1148),
    (1148, 1151),
    (1151, 1153),
    (1153, 1155),
    (1155, 1157),
    (1157, 1159),
    (1159, 1161),
    (1161, 1163),
    (1163, 1165),
    (1165, 1167),
    (1167, 1169),
    (1169, 1171),
    (1171, 1173),
    (1173, 1175),
    (1175, 1177),
    (1177, 1179),
    (1179, 1181),
    (1181, 1183),
    (1183, 1185),
    (1185, 1187),
    # (1188, 1227),
)

cols = [
    'SEGMENT',
    'STATE',
    'ORI',
    'INCNUM',
    'INCDATE',
    'RECSBH1',
    'RECSBH2',
    'RECSBH3',
    'RECSADM',
    'RECSOFS',
    'RECSPRP',
    'RECSVIC',
    'RECSOFR',
    'RECSARR',
    'B1005',
    'B1006',
    'B1007',
    'B1008',
    'B1009',
    'B1010',
    'B1011',
    'B1012',
    'B1013',
    'B1014',
    'B1015',
    'B1016',
    'B1017',
    'B1018',
    'B2005',
    'B2006',
    'B2007',
    'B2008',
    'B2009',
    'B2010',
    'B2011',
    'B2012',
    'B2013',
    'B2014',
    'B2015',
    'B2016',
    'B2017',
    'B2018',
    'B2019',
    'B2020',
    'B3005',
    'B3006',
    'B3007',
    'B3008',
    'B3009',
    'B3010',
    'B3011',
    'B3012',
    'B3013',
    'B3014',
    'B3015',
    'B3016',
    'B3017',
    'B3018',
    'B3019',
    'B3020',
    'B3021',
    'B3022',
    'B3023',
    'B3024',
    'B3025',
    'B3026',
    'B3027',
    'B3028',
    'V1006',
    'V1007',
    'V1008',
    'V1009',
    'V1010',
    'V1011',
    'V1012',
    'V1013',
    'V1014',
    'V1016',
    'V20061',
    'V20062',
    'V20063',
    'V20071',
    'V20072',
    'V20073',
    'V20081',
    'V20082',
    'V20083',
    'V20091',
    'V20092',
    'V20093',
    'V20101',
    'V20102',
    'V20103',
    'V20111',
    'V20112',
    'V20113',
    'V20121',
    'V20122',
    'V20123',
    'V20131',
    'V20132',
    'V20133',
    'V20141',
    'V20142',
    'V20143',
    'V20151',
    'V20152',
    'V20153',
    'V20161',
    'V20162',
    'V20163',
    'V20171',
    'V20172',
    'V20173',
    'V20181',
    'V20182',
    'V20183',
    'V20191',
    'V20192',
    'V20193',
    'V20201',
    'V20202',
    'V20203',
    'V30061',
    'V30062',
    'V30063',
    'V30071',
    'V30072',
    'V30073',
    'V30081',
    'V30082',
    'V30083',
    'V30091',
    'V30092',
    'V30093',
    'V30101',
    'V30102',
    'V30103',
    'V30111',
    'V30112',
    'V30113',
    'V30121',
    'V30122',
    'V30123',
    'V30131',
    'V30132',
    'V30133',
    'V30141',
    'V30142',
    'V30143',
    'V30151',
    'V30152',
    'V30153',
    'V30161',
    'V30162',
    'V30163',
    'V30171',
    'V30172',
    'V30173',
    'V30181',
    'V30182',
    'V30183',
    'V30191',
    'V30192',
    'V30193',
    'V30201',
    'V30202',
    'V30203',
    'V30211',
    'V30212',
    'V30213',
    'V30221',
    'V30222',
    'V30223',
    'V30231',
    'V30232',
    'V30233',
    'V40061',
    'V40062',
    'V40063',
    'V40071',
    'V40072',
    'V40073',
    'V40081',
    'V40082',
    'V40083',
    'V40091',
    'V40092',
    'V40093',
    'V40101',
    'V40102',
    'V40103',
    'V40111',
    'V40112',
    'V40113',
    'V40121',
    'V40122',
    'V40123',
    'V40131',
    'V40132',
    'V40133',
    'V40141',
    'V40142',
    'V40143',
    'V40151',
    'V40152',
    'V40153',
    'V40161',
    'V40162',
    'V40163',
    'V40171',
    'V40172',
    'V40173',
    'V4017A1',
    'V4017A2',
    'V4017A3',
    'V4017B1',
    'V4017B2',
    'V4017B3',
    'V4017C1',
    'V4017C2',
    'V4017C3',
    'V40181',
    'V40182',
    'V40183',
    'V40191',
    'V40192',
    'V40193',
    'V40201',
    'V40202',
    'V40203',
    'V40211',
    'V40212',
    'V40213',
    'V40221',
    'V40222',
    'V40223',
    'V40231',
    'V40232',
    'V40233',
    'V40241',
    'V40242',
    'V40243',
    'V40251',
    'V40252',
    'V40253',
    'V40261',
    'V40262',
    'V40263',
    'V40271',
    'V40272',
    'V40273',
    'V40281',
    'V40282',
    'V40283',
    'V40291',
    'V40292',
    'V40293',
    'V40301',
    'V40302',
    'V40303',
    'V40311',
    'V40312',
    'V40313',
    'V40321',
    'V40322',
    'V40323',
    'V40331',
    'V40332',
    'V40333',
    'V40341',
    'V40342',
    'V40343',
    'V40351',
    'V40352',
    'V40353',
    'V40361',
    'V40362',
    'V40363',
    'V40371',
    'V40372',
    'V40373',
    'V40381',
    'V40382',
    'V40383',
    'V40391',
    'V40392',
    'V40393',
    'V40401',
    'V40402',
    'V40403',
    'V40411',
    'V40412',
    'V40413',
    'V40421',
    'V40422',
    'V40423',
    'V40431',
    'V40432',
    'V40433',
    'V40441',
    'V40442',
    'V40443',
    'V40451',
    'V40452',
    'V40453',
    'V40461',
    'V40462',
    'V40463',
    'V40471',
    'V40472',
    'V40473',
    'V40481',
    'V40482',
    'V40483',
    'V40491',
    'V40492',
    'V40493',
    'V40501',
    'V40502',
    'V40503',
    'V50061',
    'V50062',
    'V50063',
    'V50071',
    'V50072',
    'V50073',
    'V50081',
    'V50082',
    'V50083',
    'V50091',
    'V50092',
    'V50093',
    'V60061',
    'V60062',
    'V60063',
    'V60071',
    'V60072',
    'V60073',
    'V60081',
    'V60082',
    'V60083',
    'V60091',
    'V60092',
    'V60093',
    'V60101',
    'V60102',
    'V60103',
    'V60111',
    'V60112',
    'V60113',
    'V60121',
    'V60122',
    'V60123',
    'V60131',
    'V60132',
    'V60133',
    'V60141',
    'V60142',
    'V60143',
    'V60151',
    'V60152',
    'V60153',
    'V60161',
    'V60162',
    'V60163',
    'V60171',
    'V60172',
    'V60173',
    'V60181',
    'V60182',
    'V60183',
    'V60191',
    'V60192',
    'V60193',
]

State_Codes = (
    (1,  'AL'),
    (2,  'AZ'),
    (3,  'AR'),
    (4,  'CA'),
    (5,  'CO'),
    (6,  'CT'),
    (7,  'DE'),
    (8,  'DC'),
    (9,  'FL'),
    (10,  'GA'),
    (11,  'ID'),
    (12,  'IL'),
    (13,  'IN'),
    (14,  'IA'),
    (15,  'KS'),
    (16,  'KY'),
    (17,  'LA'),
    (18,  'ME'),
    (19,  'MD'),
    (20,  'MA'),
    (21,  'MI'),
    (22,  'MN'),
    (23,  'MS'),
    (24,  'MO'),
    (25,  'MT'),
    (26,  'NB'),
    (27,  'NV'),
    (28,  'NH'),
    (29,  'NJ'),
    (30,  'NM'),
    (31,  'NY'),
    (32,  'NC'),
    (33,  'ND'),
    (34,  'OH'),
    (35,  'OK'),
    (36,  'OR'),
    (37,  'PA'),
    (38,  'RI'),
    (39,  'SC'),
    (40,  'SD'),
    (41,  'TN'),
    (42,  'TX'),
    (43,  'UT'),
    (44,  'VT'),
    (45,  'VA'),
    (46,  'WA'),
    (47,  'WV'),
    (48,  'WI'),
    (49,  'WY'),
    (50,  'AK'),
    (51,  'HI'),
    (52,  'CZ'),
    (53,  'PR'),
    (54,  'AS'),
    (55,  'GM'),
    (62,  'VI'),
    )
state_lookup = {i[0]: i[1] for i in State_Codes}

column_locations = {i[1]: i[0] for i in zip(locations,  cols)}
keep_list = [
        # 'STATE',  # Numeric code for state,  recoded as above
        # 'INCDATE',  # Incident date,  8 digit integer
        'ORI',
        'B3011',  # Year
        # 'V1006',
        # 'V1008',
        # 'V4017',  # (type of victim,  should = 1 for individual) in victim file
        # 'V4018',  # Integer age,  minus some like 0.2 for babies
        # 'V4019',  # Gender (0 for female,  1 for male)
        'V40191',  # Gender of victim 1 (0 for female,  1 for male)
        'V40192',  # Gender of victim 2  (0 for female,  1 for male)
        'V40193',  # Gender of victim 3  (0 for female,  1 for male)
        'V40171',  # Type of victim - 1 (code 1 is individual - other choices are business,  state,  etc)
        'V40172',  # Type of victim - 2
        'V40173',  # Type of victim - 3
        'V40071',  # UCR offense code 1-1 (not sure what this means)
        'V20061',  # Offense code 1 (131,  132,  133 are assault)
        'V20062',  # Offense code 2 (131,  132,  133 are assault)
        'V20063',  # Offense code 3 (131,  132,  133 are assault)
        'V40321',  # Relationship to offender,  
                  # 1 is spouse
                  # 2 is common-law spouse
                  # 18 is boyfrind/girlfriend
                  # 20 is homosexual partner
                  # 21: ex-spouse
        'V40322',
        'V40323',
        # 'B1007',
        # 'B1008',
        # 'B1012',
        ]
'''
# Offence codes from UCR
        Homicide Offenses
        91 Murder/Nonnegligent Manslaughter
        92 Negligent Manslaughter
        93 Justifiable Homicide
        100 Kidnaping/Abduction
        Sex Offenses,  Forcible
        111 Forcible Rape
        112 Forcible Sodomy
        113 Sexual Assault With An Object
        114 Forcible Fondling
        120 Robbery
        Assault Offenses
        131 Aggravated Assault
        132 Simple Assault
        133 Intimidation
        200 Arson
        210 Extortion/Blackmail
        220 Burglary/Breaking and Entering
        Larceny/Theft Offenses
        231 Pocket-picking
        232 Purse-snatching
        233 Shoplifting
        234 Theft From Building
        235 Theft From Coin-Operated Machine or Device
        236 Theft From Motor Vehicle
        237 Theft of Motor Vehicle Parts/Accessories
        238 All Other Larceny
        240 Motor Vehicle Theft
        250 Counterfeiting/Forgery
        Fraud Offenses
        261 False Pretenses/Swindle/Confidence Game
        262 Credit Card/Automatic Teller Machine Fraud
        263 Impersonation
        264 Welfare Fraud
        265 Wire Fraud
        270 Embezzlement
        280 Stolen Property Offenses
        290 Destruction/Damage/Vandalism of Property
        Drug/Narcotic Offenses
        351 Drug/Narcotic Violations
        352 Drug Equipment Violations
        Sex Offenses,  Nonforcible
        361 Incest
        362 Statutory Rape
        370 Pornography/Obscene Material
        Gambling Offenses
        391 Betting/Wagering
        392 Operating/Promoting/Assisting Gambling
        393 Gambling Equipment Violations
        394 Sports Tampering
        Prostitution Offenses
        401 Prostitution
        402 Assisting or Promoting Prostitution
        510 Bribery
        520 Weapon Law Violations
'''
locs = tuple([column_locations[i] for i in keep_list])
names = keep_list
# m = pd.read_fwf('35036-0001-Data.txt', colspecs=locs, names=names, nrows=400)
m = pd.read_fwf('35036-0001-Data.txt', colspecs=locs, names=names)
m['year'] = 2012
# m2 = pd.read_fwf('ICPSR_34603/DS0001/34603-0001-Data.txt', colspecs=locs, names=names, nrows=400) # 2011
m2 = pd.read_fwf('ICPSR_34603/DS0001/34603-0001-Data.txt', colspecs=locs, names=names)  # 2011
m2['year'] = 2011
m = pd.concat([m,  m2],  axis=0)
m['prostitution'] = m['V20061'].isin([401])
m['female_violence'] = ((m['V40191'] == 0) & (m['V40171'] == 1) & (m['V20061'].isin([131,  132,  133])))
m['violence'] = ((m['V40171'] == 1) & (m['V20061'].isin([131,  132,  133])))
m = m[['year', 'ORI', 'prostitution', 'female_violence', 'violence']]

# Now work with 2013
vlocs = {
        'ORI': (4, 13),
        'INCIDENT': (13, 25),
        'DATE': (25, 33),
        'UCR_OFFENSE_CODE': (36, 39),  # One of several,  but for consistency we're just using the first... #V4007
        'SEX': (81, 82),  # 'F' or 'M'
        'TYPE': (66, 67),  # V4017,  'I' is individual,  'B' is business,  etc
        }
victim_2013 = pd.read_fwf('36120-0005-Data.txt',  colspecs=tuple(vlocs.values()),  names=vlocs.keys(),  nrows=None)
victim_2013['year'] = victim_2013['DATE'].apply(lambda x: int(str(x)[0:4]))
# Final DF needs: year,  prostitution,  female_violence,  violence,  ORI
victim_2013['prostitution'] = victim_2013['UCR_OFFENSE_CODE'].isin(['40A'])
victim_2013['violence'] = ((victim_2013['UCR_OFFENSE_CODE'].isin(['13A', '13B', '13C'])) & (victim_2013['TYPE'] == 'I'))
victim_2013['female_violence'] = ((victim_2013['violence']) & (victim_2013['SEX'] == 'F'))
m = pd.concat([m,  victim_2013[['year', 'ORI', 'prostitution', 'female_violence', 'violence']]])

# Goals: compute counts of geographic-level total violent acts,  violent
# acts towarsd women,  and domestic violence acts
# cross_walk = pd.read_stata('ICPSR_04634/DS0001/04634-0001-Data.dta')
cross_walk = pd.read_csv('crosswalk_tract_msa.csv')

# This code explores whether data columns appear to match 2012
# import ipdb
# for i in keep_list:
#     if i is not 'B3011':
#         values_2012 = m[i].value_counts().index.values
#         values = m2[i].value_counts().index.values
#         for v in values.tolist():
#             if v in values_2012.tolist():
#                 print(values)
#                 print(values_2012)
#             else:
#                 print('values: %s' % str(values))
#                 print('values in 2012: %s' % str(values))


#  "ORI" in the main data table maps to ORI9 in the crosswalk
#  Data Access
# Dataset Availability
# Location:
# Extent of Collection:
# Data Use Statement:
# Citation Requirement:
# Deposit Requirement:
# Alpha State Code (STATE)
# County Name (COUNTY)
# Place Name (PLACENM)
# Government ID (numeric) (GOVIDNU)
# Government Type (GOVTYPE)
# Government Name (GOVNAME)
# Agency Name (AGENCY)
# FIPS State Code (FSTATE)
# FIPS County Code (FCOUNTY)
# FIPS Place code (FPLACE)
cross_walk = cross_walk[['ORI9',  'PLACENM', 'AGENCY', 'FSTATE', 'FCOUNTY', 'FPLACE',  'UPOPTOT', 'MSA', 'msaname',
                         'countyno', '_merge']]
cross_walk = cross_walk[~cross_walk.MSA.isnull()]
cross_walk = cross_walk[cross_walk['_merge'] == 'matched (3)']
cross_walk['census_msa_code'] = cross_walk.MSA.apply(lambda x: '31000US%s' % str(int(x)))
m = pd.merge(m,
             cross_walk[['ORI9',  'census_msa_code']],
             left_on='ORI',  right_on='ORI9')  # Merge acts onto MSAs by
# ORI code
#
b = m.groupby(['census_msa_code',  'year'])[['prostitution',  'female_violence',  'violence']].aggregate([np.size,
                                                                                                          np.mean,
                                                                                                          np.sum])
# b.rename(columns={'codes':'census_msa_code'},  inplace=True)
b['violence'].to_csv('violence_nibrs.csv')
b['female_violence'].to_csv('female_violence_nibrs.csv')
b['prostitution'].to_csv('prostitution_nibrs.csv')
